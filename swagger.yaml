openapi: 3.0.0
info:
  title: Game Library API
  version: 1.0.0
  description: API documentation for Game Library backend service

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: /api
    description: API base path

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: john_doe
        email:
          type: string
          format: email
          example: john@example.com
        roles:
          type: array
          items:
            type: string
          example: ["user"]

    Game:
      type: object
      properties:
        title:
          type: string
          example: The Witcher 3
        description:
          type: string
          example: An action role-playing game
        genre:
          type: string
          format: uuid
          example: 507f1f77bcf86cd799439011
        releaseDate:
          type: string
          format: date
          example: "2015-05-19"
        rating:
          type: number
          format: float
          example: 9.5
        price:
          type: number
          format: float
          example: 29.99

    Genre:
      type: object
      properties:
        name:
          type: string
          example: RPG
        description:
          type: string
          example: Role-playing games

    Error:
      type: object
      properties:
        message:
          type: string
          example: Error message here

paths:
  /auth/signup:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: john_doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: "********"
                roles:
                  type: array
                  items:
                    type: string
                  example: ["user"]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signin:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/token:
    get:
      summary: Verify JWT token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is valid
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games:
    get:
      summary: Get all games
      tags:
        - Games
      responses:
        '200':
          description: List of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    post:
      summary: Create a new game
      tags:
        - Games
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        '201':
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{id}:
    get:
      summary: Get game by ID
      tags:
        - Games
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Game details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /genres:
    get:
      summary: Get all genres
      tags:
        - Genres
      responses:
        '200':
          description: List of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
    post:
      summary: Create a new genre
      tags:
        - Genres
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        '201':
          description: Genre created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 